export const challenges = [
  {
    id: 1,
    title: 'Ïã§ÌóòÏã§ ÏûÖÎ¨∏Ïûê',
    description: 'Ï≤´ Î≤àÏß∏ Ïã§ÌóòÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÌïòÍ∏∞',
    condition: (experiments) => experiments.length >= 1,
    icon: 'üß™',
    difficulty: 'Ï¥àÍ∏â'
  },
  {
    id: 2,
    title: 'Ïò®ÎèÑ ÌÉêÌóòÍ∞Ä',
    description: '4Í∞ÄÏßÄ Ïò®ÎèÑ Ï°∞Í±¥ Î™®Îëê Ïã§ÌóòÌï¥Î≥¥Í∏∞',
    condition: (experiments) => new Set(experiments.map(exp => exp.temperature)).size >= 4,
    icon: 'üå°Ô∏è',
    difficulty: 'Ï¥àÍ∏â'
  },
  {
    id: 3,
    title: 'Î¨ºÏßà ÏàòÏßëÍ∞Ä',
    description: '3Í∞ÄÏßÄ Î¨ºÏßà Î™®Îëê Ïã§ÌóòÌï¥Î≥¥Í∏∞',
    condition: (experiments) => new Set(experiments.map(exp => exp.substance)).size >= 3,
    icon: '‚öóÔ∏è',
    difficulty: 'Ï¥àÍ∏â'
  },
  {
    id: 4,
    title: 'ÌôîÌïô Í≥µÏãù ÎßàÏä§ÌÑ∞',
    description: '3Í∞ÄÏßÄ Î¨ºÏßàÏùò ÌôîÌïôÏãùÏùÑ Î™®Îëê Ïô∏Ïö∞Í≥† Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => new Set(experiments.map(exp => exp.substance)).size >= 3,
    icon: '‚öõÔ∏è',
    difficulty: 'Ï¥àÍ∏â'
  },
  {
    id: 5,
    title: 'Ìè¨ÌôîÏö©Ïï° ÎßàÏä§ÌÑ∞',
    description: 'Ìè¨ÌôîÏö©Ïï°ÏùÑ 5Î≤à Ïù¥ÏÉÅ ÎßåÎì§Í∏∞',
    condition: (experiments) => experiments.filter(exp => exp.result.isSaturated).length >= 5,
    icon: 'üíé',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 6,
    title: 'Ï†ïÎ∞Ä Ïã§ÌóòÍ∞Ä',
    description: 'Ïö©Ìï¥ Ìö®Ïú® 95% Ïù¥ÏÉÅ Îã¨ÏÑ±ÌïòÍ∏∞',
    condition: (experiments) => experiments.some(exp => parseFloat(exp.result.efficiency) >= 95),
    icon: 'üéØ',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 7,
    title: 'Ïò®ÎèÑ ÎπÑÍµê Ï†ÑÎ¨∏Í∞Ä',
    description: 'Í∞ôÏùÄ Î¨ºÏßàÎ°ú 4Í∞ÄÏßÄ Ïò®ÎèÑÏóêÏÑú Î™®Îëê Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => {
      const substanceGroups = experiments.reduce((acc, exp) => {
        acc[exp.substance] = acc[exp.substance] || new Set();
        acc[exp.substance].add(exp.temperature);
        return acc;
      }, {});
      return Object.values(substanceGroups).some(temps => temps.size >= 4);
    },
    icon: 'üìä',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 8,
    title: 'Ïó∞Íµ¨ÏõêÏùò ÎÅàÍ∏∞',
    description: 'Ï¥ù 15Î≤à Ïù¥ÏÉÅ Ïã§Ìóò ÏàòÌñâÌïòÍ∏∞',
    condition: (experiments) => experiments.length >= 15,
    icon: 'üî¨',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 9,
    title: 'ÏÜçÎèÑÏôï',
    description: '3Î∂Ñ Ïù¥ÎÇ¥Ïóê Ïã§Ìóò 5Î≤à Ïó∞ÏÜç ÏôÑÎ£åÌïòÍ∏∞',
    condition: (experiments) => {
      if (experiments.length < 5) return false;
      const recent5 = experiments.slice(0, 5);
      const timestamps = recent5.map(exp => new Date(exp.timestamp).getTime());
      const timeDiff = timestamps[0] - timestamps[4];
      return timeDiff <= 3 * 60 * 1000;
    },
    icon: '‚ö°',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 10,
    title: 'Ï†àÏïΩ Ïã§ÌóòÍ∞Ä',
    description: 'Î¨º 50mL Ïù¥ÌïòÎ°ú Ìè¨ÌôîÏö©Ïï° ÎßåÎì§Í∏∞',
    condition: (experiments) => experiments.some(exp => exp.waterVolume <= 50 && exp.result.isSaturated),
    icon: 'üíß',
    difficulty: 'Ï§ëÍ∏â'
  },
  {
    id: 11,
    title: 'ÎÜçÎèÑ Í≥ÑÏÇ∞ Í≥†Ïàò',
    description: 'ÎÜçÎèÑ 10% Ïù¥ÏÉÅÏù∏ Ïö©Ïï° 3Í∞ú Ïù¥ÏÉÅ ÎßåÎì§Í∏∞',
    condition: (experiments) => experiments.filter(exp => parseFloat(exp.result.concentration) >= 10).length >= 3,
    icon: 'üìê',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 12,
    title: 'Í∑πÌïú Ïã§ÌóòÍ∞Ä',
    description: '50g Ïù¥ÏÉÅÏùò Ïö©ÏßàÎ°ú Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => experiments.some(exp => exp.amount >= 50),
    icon: '‚ö°',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 13,
    title: 'ÎåÄÏö©Îüâ Ïã§ÌóòÍ∞Ä',
    description: '500mL Ïù¥ÏÉÅÏùò Ïö©Îß§Î°ú Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => experiments.some(exp => exp.waterVolume >= 500),
    icon: 'üåä',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 14,
    title: 'ÎÜçÎèÑ ÎßàÎ≤ïÏÇ¨',
    description: 'ÎÜçÎèÑ 20% Ïù¥ÏÉÅÏù∏ Ï¥àÍ≥†ÎÜçÎèÑ Ïö©Ïï° ÎßåÎì§Í∏∞',
    condition: (experiments) => experiments.some(exp => parseFloat(exp.result.concentration) >= 20),
    icon: 'ü™Ñ',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 15,
    title: 'ÎåÄÎüâ ÏÉùÏÇ∞Ïûê',
    description: 'Ìïú Î≤àÏóê 100g Ïù¥ÏÉÅÏùò Ïö©ÏßàÎ°ú Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => experiments.some(exp => exp.amount >= 100),
    icon: '‚öñÔ∏è',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 16,
    title: 'Ïò®ÎèÑ ÎßàÏä§ÌÑ∞',
    description: 'Í∞ôÏùÄ Î¨ºÏßàÎ°ú Ïò®ÎèÑ Ï∞®Ïù¥ 80¬∞C Ïù¥ÏÉÅ Ïã§ÌóòÌïòÍ∏∞',
    condition: (experiments) => {
      const substanceGroups = experiments.reduce((acc, exp) => {
        acc[exp.substance] = acc[exp.substance] || [];
        acc[exp.substance].push(exp.temperature);
        return acc;
      }, {});
      
      return Object.values(substanceGroups).some(temps => {
        const hasHot = temps.includes('hot');
        const hasCold = temps.includes('cold');
        return hasHot && hasCold;
      });
    },
    icon: 'üå°Ô∏è',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 17,
    title: 'Ïã§Ìóò Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∞Ä',
    description: '10Í∞ÄÏßÄ Ïù¥ÏÉÅÏùò ÏÑúÎ°ú Îã§Î•∏ Ïã§Ìóò Ï°∞Í±¥ ÏãúÎèÑÌïòÍ∏∞',
    condition: (experiments) => {
      const uniqueConditions = new Set();
      experiments.forEach(exp => {
        uniqueConditions.add(`${exp.substance}-${exp.temperature}-${exp.amount}-${exp.waterVolume}`);
      });
      return uniqueConditions.size >= 10;
    },
    icon: 'üìä',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 18,
    title: 'Ïö©Ìï¥ÎèÑ ÏòàÏ∏°Í∞Ä',
    description: 'Ïù¥Î°†Í∞íÍ≥º Ïã§Ï†úÍ∞íÏù¥ Ï†ïÌôïÌûà ÏùºÏπòÌïòÎäî Ïã§Ìóò 3Î≤à Îã¨ÏÑ±',
    condition: (experiments) => {
      const perfectMatches = experiments.filter(exp => {
        const theoreticalMax = (exp.result.theoreticalSolubility * exp.waterVolume) / 100;
        return Math.abs(theoreticalMax - parseFloat(exp.result.maxSoluble)) < 0.1;
      });
      return perfectMatches.length >= 3;
    },
    icon: 'üîÆ',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 19,
    title: 'ÏôÑÎ≤ΩÏ£ºÏùòÏûê',
    description: 'Ïó∞ÏÜçÏúºÎ°ú 5Î≤à Ïö©Ìï¥ Ìö®Ïú® 90% Ïù¥ÏÉÅ Îã¨ÏÑ±',
    condition: (experiments) => {
      if (experiments.length < 5) return false;
      const recent5 = experiments.slice(0, 5);
      return recent5.every(exp => parseFloat(exp.result.efficiency) >= 90);
    },
    icon: 'üíØ',
    difficulty: 'Í≥†Í∏â'
  },
  {
    id: 20,
    title: 'Í≥ºÌïôÏûêÏùò Íøà',
    description: 'Î™®Îì† Î¨ºÏßàÎ°ú Î™®Îì† Ïò®ÎèÑ Ï°∞Í±¥ Ïã§Ìóò ÏôÑÎ£å (12Í∞ÄÏßÄ Ï°∞Ìï©)',
    condition: (experiments) => {
      const combinations = new Set();
      experiments.forEach(exp => {
        combinations.add(`${exp.substance}-${exp.temperature}`);
      });
      return combinations.size >= 12;
    },
    icon: 'üèÖ',
    difficulty: 'Ï†ÑÏÑ§'
  },
  {
    id: 21,
    title: 'Ïö©Ìï¥ÎèÑ Î∞ïÏÇ¨',
    description: 'Ï¥ù 30Î≤à Ïù¥ÏÉÅ Ïã§ÌóòÌïòÍ≥† Î™®Îì† Ï§ëÍ∏â ÎèÑÏ†ÑÍ≥ºÏ†ú ÏôÑÎ£å',
    condition: (experiments) => {
      const midLevelChallenges = challenges.filter(c => c.difficulty === 'Ï§ëÍ∏â');
      const completedMidLevel = midLevelChallenges.filter(c => c.condition(experiments)).length;
      return experiments.length >= 30 && completedMidLevel === midLevelChallenges.length;
    },
    icon: 'üë®‚Äçüî¨',
    difficulty: 'Ï†ÑÏÑ§'
  }
];